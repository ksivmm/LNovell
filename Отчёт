анотация
Данный отчёт посвящён разработке приложения LNovell — программы для управления библиотекой новелл с использованием графического интерфейса на основе библиотеки Tkinter и базы данных SQLite. Приложение предоставляет пользователю возможность добавлять новеллы с обложками, описаниями и главами, просматривать их в удобном формате с поддержкой прокрутки и форматирования текста, а также осуществлять поиск по библиотеке. Основное внимание в работе уделено проектированию интуитивно понятного интерфейса, реализации функционала работы с базой данных для хранения данных о новеллах и главах, а также созданию визуально привлекательного отображения обложек с закруглёнными углами. Отчёт описывает структуру программы, ключевые этапы её разработки, использованные технологии и результаты тестирования, демонстрируя эффективность решения поставленных задач.
**Введение**

В современном мире, где цифровые технологии прочно вошли в повседневную жизнь, создание специализированных приложений для узких сфер интересов становится всё более востребованным. Одной из таких сфер является чтение и управление новеллами — жанром литературы, который сочетает текстовое повествование с элементами визуального оформления и пользуется популярностью среди широкой аудитории. Разработка приложения `LNovell` на языке Python с использованием библиотеки Tkinter и базы данных SQLite представляет собой актуальный проект, отвечающий потребностям любителей новелл в удобном инструменте для организации персональной библиотеки. Актуальность работы обусловлена ростом интереса к цифровым платформам для чтения, а также необходимостью создания доступных и простых в использовании решений, которые могут работать на различных платформах без сложной настройки. `LNovell` предлагает пользователю функционал для управления новеллами, обеспечивая при этом эстетическое оформление и удобство навигации.

Проект `LNovell` ориентирован на решение практических задач, таких как добавление новелл с обложками и описаниями, управление главами с поддержкой форматирования текста (заголовки, списки, параграфы), а также поиск по библиотеке. Использование SQLite позволяет надёжно хранить данные, а обработка обложек с закруглёнными углами с помощью библиотеки PIL подчёркивает внимание к деталям дизайна. Возможности применения приложения выходят за рамки личного использования: оно может служить основой для создания электронных библиотек новелл в образовательных учреждениях, литературных клубах или онлайн-сообществах. Например, преподаватели литературы могут использовать `LNovell` для хранения учебных материалов в формате новелл, а независимые авторы — для публикации и тестирования своих произведений среди читателей. Кроме того, открытый код и простота интеграции делают приложение перспективным для дальнейших доработок, таких как добавление экспорта в PDF или синхронизации с облачными сервисами.

Данный отчёт описывает процесс разработки `LNovell`, включая проектирование структуры программы, реализацию её функций и тестирование. В работе подробно рассмотрены используемые технологии: Tkinter для построения графического интерфейса, SQLite для управления данными и PIL для обработки изображений. Особое внимание уделено созданию эргономичного дизайна с тёмной темой, сеткой новелл и прокручиваемыми списками глав. Актуальность проекта подкрепляется его практической ценностью, а возможности применения демонстрируют потенциал для адаптации в различных сценариях. Итогом стало создание полнофункционального приложения, которое не только решает задачу организации библиотеки новелл, но и открывает перспективы для дальнейшего развития, таких как добавление многопользовательского режима или интеграции с веб-платформами.

## Раздел I. Специальная часть

### 1.1 Процесс разработки

Процесс разработки приложения `LNovell` включает несколько ключевых этапов, направленных на создание удобного и функционального инструмента для управления библиотекой новелл:  
- **Анализ требований** — изучение потребностей пользователей (любителей новелл), определение целевой аудитории и формулирование требований к интерфейсу, функционалу и хранению данных.  
- **Проектирование структуры** — разработка макетов главного окна, страниц новелл и глав, а также схемы навигации между ними.  
- **Создание базы данных** — проектирование структуры SQLite для хранения информации о новеллах и главах с учётом их взаимосвязей.  
- **Разработка интерфейса** — реализация графического интерфейса с использованием Tkinter и стилизация элементов через ttk для создания тёмной темы.  
- **Обработка изображений** — интеграция библиотеки PIL для обработки обложек новелл, включая создание закруглённых углов.  
- **Тестирование и оптимизация** — проверка работы приложения на разных разрешениях экрана, исправление ошибок и улучшение производительности.

### 1.2 Внешний вид интерфейса. Tkinter и ttk

Tkinter — это стандартная библиотека Python для создания графических интерфейсов, которая используется в `LNovell` для построения основы приложения. Она предоставляет набор виджетов (кнопки, текстовые поля, рамки), которые формируют структуру окон и обеспечивают взаимодействие с пользователем. В проекте Tkinter применяется для создания главного окна с сеткой новелл, страниц отдельных произведений и окон добавления контента.  

Для улучшения визуального оформления используется модуль ttk (Themed Tkinter), который добавляет современные стили и темы. В `LNovell` с помощью ttk реализована тёмная тема: чёрный фон (#000000), серые элементы (#2a2a2a) и акценты синего цвета (#4a90e2). Это обеспечивает эстетичный вид и удобство чтения. Например, сетка новелл на главном экране отображается в виде карточек с обложками размером 161x225 пикселей, а текст глав форматируется с использованием тегов для выделения заголовков и списков. Адаптивность интерфейса достигается за счёт прокручиваемых областей, созданных с помощью Canvas и Scrollbar, что позволяет комфортно работать с большим количеством контента.

### 1.3 Работа с базой данных. SQLite

SQLite — это встраиваемая реляционная база данных, которая используется в `LNovell` для хранения информации о новеллах и главах. Её преимущества включают лёгкость интеграции, отсутствие необходимости в отдельном сервере и высокую производительность для небольших приложений. В проекте созданы две таблицы: `novels` (id, title, cover, description) для хранения данных о новеллах и `chapters` (id, novel_id, title, content) для глав, связанных с новеллами через внешний ключ.  

Работа с базой данных осуществляется через модуль sqlite3 в Python. Например, при добавлении новой новеллы данные (название, обложка в формате BLOB, описание) записываются в таблицу `novels`, а при просмотре страницы новеллы выполняется запрос для извлечения связанных глав. Реализация поиска по названию использует оператор LIKE, что позволяет быстро находить нужные произведения. SQLite обеспечивает надёжное сохранение данных и их доступность даже после перезапуска приложения, что делает её идеальной для локального хранения библиотеки.

### 1.4 Обработка изображений. PIL

Библиотека PIL (Python Imaging Library), представленная в виде модуля Pillow, используется в `LNovell` для обработки обложек новелл. Она позволяет загружать изображения, изменять их размер и применять эффекты. В приложении реализована функция `round_corners`, которая обрезает углы обложек с заданным радиусом (20 пикселей), создавая закруглённый эффект. Это улучшает визуальное восприятие карточек новелл на главном экране.  

Процесс обработки включает преобразование изображения в формат RGB, наложение маски с закруглёнными углами и последующее сохранение в виде объекта ImageTk для отображения в Tkinter. Если обложка не загружена, создаётся заглушка серого цвета размером 161x225 пикселей. Использование PIL добавляет приложению профессиональный вид и подчёркивает внимание к деталям дизайна.

### 1.5 Среда разработки. Visual Studio Code

Visual Studio Code (VS Code) — это популярный редактор кода, который использовался для разработки `LNovell`. Он поддерживает Python через встроенные инструменты и расширения, такие как Python Extension, что упрощает написание, отладку и тестирование кода. В проекте VS Code обеспечил удобную работу с файлами, подсветку синтаксиса и автодополнение для библиотек Tkinter, sqlite3 и PIL.  

Интерфейс редактора позволил быстро переключаться между классами и функциями приложения, а встроенный терминал использовался для запуска программы и проверки её работы. Расширения, такие как GitLens, также упростили управление версиями кода, что особенно полезно при доработке и тестировании новых функций.

### 1.6 Контроль версий. Git

Git — это система контроля версий, применённая в процессе разработки `LNovell` для отслеживания изменений в коде. Она позволила фиксировать каждую стадию работы, начиная от создания базовой структуры приложения до добавления сложных функций, таких как форматирование текста глав. Использование веток дало возможность экспериментировать с новыми идеями (например, различными стилями интерфейса) без риска повредить основную версию.  

В проекте Git обеспечивал сохранение истории изменений, что упрощало анализ ошибок и возврат к стабильным версиям при необходимости. Локальный репозиторий позволял управлять кодом на всех этапах разработки, а в перспективе его можно использовать для совместной работы или публикации проекта на платформах вроде GitHub.

раздел 2
главная страница 
Главная страница приложения `LNovell` является начальной точкой взаимодействия пользователя с программой и открывается сразу после запуска. Её основная задача — предоставить пользователю удобный обзор библиотеки новелл, дать представление о доступных произведениях и обеспечить быстрый доступ к ключевым функциям. На главной странице отображаются карточки новелл с обложками, названиями и базовой информацией, что помогает пользователю сразу сориентироваться в коллекции.

Дизайн главной страницы разработан с акцентом на визуальную привлекательность и интуитивность. Использование тёмной темы с чёрным фоном (#000000) и контрастными элементами создаёт комфортное восприятие, а сетка из карточек новелл (размером 177x317 пикселей) с закруглёнными обложками добавляет эстетическую ценность. Важным аспектом является удобная навигация: кнопка "Добавить новеллу" и поле поиска расположены в верхней части окна, что позволяет быстро расширять библиотеку или находить нужное произведение. Прокручиваемая область, реализованная через Canvas и Scrollbar, обеспечивает гибкость при работе с большим количеством новелл. С точки зрения UI/UX, главная страница организована так, чтобы пользователь мог легко ориентироваться в интерфейсе, не отвлекаясь на избыточную информацию, но при этом имел доступ к основным функциям приложения.

хедер
Шапка страницы (header) в приложении `LNovell` — это ключевой элемент интерфейса, обеспечивающий управление основными функциями программы. Эта секция, расположенная в верхней части главного окна, содержит название приложения («LNovell»), кнопку «Добавить новеллу» и поле поиска, что позволяет пользователю быстро взаимодействовать с библиотекой. Правильная организация элементов шапки упрощает навигацию и доступ к основным возможностям, улучшая общий пользовательский опыт.

Основное внимание в дизайне шапки уделено логичности и минималистичности. Название приложения, выполненное крупным шрифтом (Arial, 20, жирный), служит ориентиром, а кнопка «Добавить новеллу» и поле поиска с кнопкой «Поиск» размещены так, чтобы быть заметными и интуитивно понятными. Шапка остаётся фиксированной в верхней части окна на всех экранах приложения, обеспечивая постоянный доступ к этим функциям. Использование тёмной темы (#000000) и контрастных цветов для текста и кнопок (#4a90e2) делает шапку визуально выделенной, что улучшает UX и позволяет пользователю мгновенно переходить к добавлению контента или поиску нужной новеллы.
Страница добавления новелл в приложении `LNovell` — это специализированный раздел интерфейса, предназначенный для создания новых записей в библиотеке. Она открывается при нажатии кнопки «Добавить новеллу» на главной странице и предоставляет пользователю возможность ввести ключевую информацию о произведении: название, обложку и описание. Этот экран играет важную роль в функционале приложения, позволяя расширять коллекцию новелл и обеспечивая удобство внесения данных.

Дизайн страницы добавления новелл разработан с учётом простоты и функциональности. В верхней части расположено поле ввода названия (ttk.Entry), ниже — кнопка «Загрузить обложку» для выбора изображения с помощью filedialog, а затем текстовое поле (tk.Text) для описания произведения. Все элементы размещены вертикально с отступами (pady=10), что делает интерфейс понятным и не перегруженным. Использование тёмной темы (#000000) с белым текстом и серыми полями ввода (#2a2a2a) сохраняет единообразие стиля приложения. Кнопки «Добавить новеллу» и «Назад» в нижней части окна завершают процесс: первая сохраняет данные в базу SQLite, вторая возвращает пользователя на главную страницу. С точки зрения UX, страница интуитивно понятна, минимизирует вероятность ошибок при заполнении и обеспечивает быстрый доступ к добавлению контента.

